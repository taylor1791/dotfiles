filetype plugin indent on

call plug#begin('~/.vim/plugged')
  " Usability
  Plug 'machakann/vim-swap' " Do not autocomplete files in gitignore
  Plug 'editorconfig/editorconfig-vim' " Change config based on project
  Plug 'vim-scripts/gitignore' " Do not autocomplete files in gitignore
  Plug 'troydm/zoomwintab.vim' " Maxmize a buffer
  Plug 'MarcWeber/vim-addon-local-vimrc' " local vimrc
  Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } " Load nerd tree whn

  " Someday I will read hex colors the way I read english. Until then...
  Plug 'chrisbra/Colorizer'
  let g:colorizer_auto_filetype='css,html,js'
  let g:colorizer_auto_color = 1

  " LSP 
  Plug 'prabirshrestha/async.vim'
  Plug 'prabirshrestha/vim-lsp'
  au User lsp_setup call lsp#register_server({
      \ 'name': 'rls',
      \ 'cmd': {server_info->['rls']},
      \ 'whitelist': ['rust'],
      \ })
  nnoremap <silent><leader>i :LspHover<cr>

  " Plug 'zxqfl/tabnine-vim'
  " let g:ycm_key_list_select_completion = ["<c-n>"]
  " let g:ycm_key_list_previous_completion = ["<c-p>"]

  " Languages
  Plug 'PsychoLlama/further.vim' " Better file resolution for js
  Plug 'raichoo/purescript-vim' " PureScript Syntax Highlighting
  Plug 'rust-lang/rust.vim' " Rust Syntax Highlighting
  " Plug 'lervag/vimtex' " See :help vimtex
  Plug 'jvirtanen/vim-hcl'


  " English is a language right?
  Plug 'reedes/vim-wordy'
  Plug 'reedes/vim-pencil'

  " Fun
  Plug 'mmisono/viminesweeper', { 'on': 'MineSweeper' }

  " IDE
  " Plug 'rhysd/git-messenger.vim' " Didn't seem to work in vim 8
  " Plug 'tpope/vim-fugitive'
  " Plug 'int3/vim-extradite'
  " Plug 'Raimondi/delimitMate'
  " Plug 'tpope/vim-surround'

  " Elm
  " Plug 'elmcast/elm-vim'

  " Haskell
  " Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' }
  " Plug 'Twinside/vim-hoogle', { 'for': 'haskell' }
  " Plug 'nbouscal/vim-stylish-haskell', { 'for': 'haskell' }
  " Plug 'eagletmt/ghcmod-vim', { 'for': 'haskell' }
  " Plug 'bitc/vim-hdevtools'

  " " Plugged Reference
  " " On-demand loading
  " Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
  " Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
  "
  " " Using git URL
  " Plug 'https://github.com/junegunn/vim-github-dashboard.git'
  "
  " " Plugin options
  " Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
  "
  " " Plugin outside ~/.vim/plugged with post-update hook
  " Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
  "
  " " Unmanaged plugin (manually installed and updated)
  " Plug '~/my-prototype-plugin'
call plug#end()

" General Config
let mapleader = " "


" Markdown specific settings
autocmd BufRead,BufNewFile *.md,*.txt,*.tex setlocal nocindent
autocmd BufRead,BufNewFile *.md,*.txt,*.tex setlocal nosmartindent
autocmd BufRead,BufNewFile *.md,*.txt setlocal textwidth=80
autocmd FileType *.md,*.txt call pencil#init({'wrap': 'hard', 'autoformat': 1})

autocmd BufRead,BufNewFile *.tf set filetype=terraform
autocmd BufRead,BufNewFile *.tfvars set filetype=terraform
autocmd BufRead,BufNewFile *.tfstate set filetype=json
autocmd BufRead,BufNewFile *.tfstate.backup set filetype=json
silent! autocmd! filetypedetect BufRead,BufNewFile *.tf

filetype off
filetype plugin indent on

set nocompatible
set modelines=0
set background=dark

set fileencoding=utf8
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set ttyfast
set whichwrap+=<,>,h,l
set laststatus=2

set wildignore+=*/tmp/*,*.sp,*.swp,*.zip,*node_modules*
highlight TrailingSpace guibg=red ctermbg=red
match TrailingSpace /\s\+$/

" REPL Like things
function! REPLSend(lines)
  call jobsend(g:last_terminal_job_id, add(a:lines, ''))
endfunction

command! REPLSendLine call REPLSend([getline('.')])
" TODO Send Selection

" Haskell
let g:syntastic_haskell_hdevtools_args = '-g -Wall -g -fno-code'

" function! Pointfree()
"   call setline('.', split(system('pointfree '.shellescape(join(getline(a:firstline, a:lastline), "\n"))), "\n"))
" endfunction
"
" function! Pointful()
"   call setline('.', split(system('pointful '.shellescape(join(getline(a:firstline, a:lastline), "\n"))), "\n"))
" endfunction

" nnoremap <silent> <leader>hh :Hoogle<CR> " Hoogle the word under the cursor
" nnoremap <leader>hH :Hoogle " Hoogle and prompt for input
" nnoremap <silent> <leader>hi :HoogleInfo<CR> " Hoogle for detailed documentation (e.g. "Functor")
" nnoremap <leader>hI :HoogleInfo " Hoogle for detailed documentation and prompt for input
" nnoremap <silent> <leader>hz :HoogleClose<CR> " Hoogle, close the Hoogle window

" nnoremap <silent> <leader>ht :GhcModType<CR>
" nnoremap <silent> <leader>hT :GhcModTypeInsert<CR>
" nnoremap <silent> <leader>h<CR> :GhcModTypeClear<CR>

" vnoremap <silent> <leader>h. :call Pointfree()<CR>
" vnoremap <silent> <leader>h, :call Pointful()<CR>

" Configure keybindings
nnoremap Q <nop> " Kill the damned Ex mode.
nnoremap <silent> <leader>rl :REPLSendLine<CR>

" Help Mr. Pinkie
nnoremap ; :

" Treat long lines as break lines
nnoremap j gj
nnoremap k gk

" Automaticall lint haskel files on save
" augroup lint
"   autocmd!
"   autocmd bufwritepost *.hs :GhcModCheckAndLintAsync
" augroup END

" Return to last edit position when opening files
augroup last_edit
  autocmd!
  autocmd BufReadPost *
       \ if line("'\"") > 0 && line("'\"") <= line("$") |
       \   exe "normal! g`\"" |
       \ endif
augroup END

let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1

